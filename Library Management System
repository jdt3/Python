class Book:
    books = []
    
    def __init__(self, title, author, publication_date):
        self.title = title
        self.author = author
        self. publication_date = publication_date
        self.is_available = True
        print(f"{self.title} is available in the library.")

    def __str__(self):
        return f"{self.title} by {self.author} ({self.publication_date})"

    @classmethod
    def add_book(cls, book):
        cls.books.append(book)

class Author:
    authors = []
    
    def __init__(self, name, nationality):
        self.name = name
        self.nationality = nationality

    def __str__(self):
        return f"{self.name} ({self.nationality})"
        
    @classmethod
    def add_author(self, author):
        self.authors.append(author)

class Patron:
    patrons = []
    
    def __init__(self, name):
        self.name = name
        self.borrowed_books = []

    @classmethod
    def add_patron(self, patron):
        self.patrons.append(patron)

class History:
    def loan_book(self, book, patron, loan_date, due_date):
        if book.is_available:
            book.is_available = False
            patron.borrowed_books.append((book, loan_date, due_date))
            print(f"{patron.name} has borrowed {book.title}. Due date: {due_date}")
        else:
            print(f"{book.title} is currently unavailable.")

    def return_book(self, book, patron):
        for borrowed_book in patron.borrowed_books:
            if borrowed_book[0] == book:
                patron.borrowed_books.remove(borrowed_book)
                book.is_available = True
                print(f"{patron.name} has returned {book.title}")
                break
        else:
            print(f"{patron.name} has not borrowed {book.title}")

    def search_book(self, title):
        for book in self.books:
            if book.title == title:
                print(f"Book: {book.title}\nAuthor: {book.author.name}\nPublication Date: {book.publication_date}")
                break
        else:
            print("Book not found.")

History = History()

# Add books and authors
book1 = Book("Two States", ("Chetan Bhagat", "Indian"), "2009")
book2 = Book("Harry Potter and the Philosopher's Stone", ("J. K. Rowling", "British"), "1997")
Book.add_book(book1)
Book.add_book(book2)

patron1 = Patron("Rachel")
Patron.add_patron(patron1)

# Loan a book
History.loan_book(book1, patron1, "22/10/2024", "22/11/2024")

# Return a book
History.return_book(book1, patron1)
    

        
        
