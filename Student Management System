class Student:
    def __init__(self, name, age, student_id):
        self.name = name
        self.age = age
        self.student_id = student_id
        self.enrolled_courses = {}  # {course: grade}

    def enroll_course(self, course):
        if course.name not in self.enrolled_courses:
            self.enrolled_courses[course] = None  # Grade starts as None
            print(f"{self.name} enrolled in {course.name}.")
        else:
            print(f"{self.name} is already enrolled in {course.name}.")

    def record_grade(self, course, grade):
        if course in self.enrolled_courses:
            self.enrolled_courses[course] = grade
            print(f"Grade {grade} recorded for {self.name} in {course.name}.")
        else:
            print(f"{self.name} is not enrolled in {course.name}.")

    def calculate_average(self):
        grades = [grade for grade in self.enrolled_courses.values() if grade is not None]
        return sum(grades) / len(grades) if grades else 0

    def total_credit_hours(self):
        return sum(course.credit_hours for course in self.enrolled_courses.keys())

    def query_grades(self):
        print(f"Grades for {self.name}:")
        for course, grade in self.enrolled_courses.items():
            status = grade if grade is not None else "No grade yet"
            print(f" - {course.name}: {status}")

    def __str__(self):
        return f"Student: {self.name}, Age: {self.age}, ID: {self.student_id}"


class Course:
    def __init__(self, name, credit_hours):
        self.name = name
        self.credit_hours = credit_hours

    def __str__(self):
        return f"Course: {self.name}, Credit Hours: {self.credit_hours}"


class StudentManagementSystem:
    def __init__(self):
        self.students = []
        self.courses = []

    def add_student(self, name, age, student_id):
        student = Student(name, age, student_id)
        self.students.append(student)
        print(f"Added student: {student}")

    def add_course(self, name, credit_hours):
        course = Course(name, credit_hours)
        self.courses.append(course)
        print(f"Added course: {course}")

    def find_student(self, student_id):
        for student in self.students:
            if student.student_id == student_id:
                return student
        print(f"Student with ID {student_id} not found.")
        return None

    def find_course(self, course_name):
        for course in self.courses:
            if course.name == course_name:
                return course
        print(f"Course {course_name} not found.")
        return None

    def enroll_student_in_course(self, student_id, course_name):
        student = self.find_student(student_id)
        course = self.find_course(course_name)
        if student and course:
            student.enroll_course(course)

    def record_student_grade(self, student_id, course_name, grade):
        student = self.find_student(student_id)
        course = self.find_course(course_name)
        if student and course:
            student.record_grade(course, grade)

    def query_student(self, student_id):
        student = self.find_student(student_id)
        if student:
            print(student)
            student.query_grades()
            print(f"Average Grade: {student.calculate_average():.2f}")
            print(f"Total Credit Hours: {student.total_credit_hours()}")

system = StudentManagementSystem()

# Adding students
system.add_student("Joey", 23, "01001")
system.add_student("Ross", 25, "01002")

# Adding courses
system.add_course("Arts", 4)
system.add_course("palaeontology", 6)
system.add_course("History", 6)

# Enrolling students in courses
system.enroll_student_in_course("01001", "Arts")
system.enroll_student_in_course("01002", "palaeontology")
system.enroll_student_in_course("01002", "History")

# Recording grades
system.record_student_grade("01001", "Arts", 85)
system.record_student_grade("01002", "palaeontology", 90)
system.record_student_grade("01002", "History", 75)

# Querying student information
system.query_student("01001")
system.query_student("01002")



-----------------------------------------

#Result
Added student: Student: Joey, Age: 23, ID: 01001
Added student: Student: Ross, Age: 25, ID: 01002
Added course: Course: Arts, Credit Hours: 4
Added course: Course: palaeontology, Credit Hours: 6
Added course: Course: History, Credit Hours: 6
Joey enrolled in Arts.
Ross enrolled in palaeontology.
Ross enrolled in History.
Grade 85 recorded for Joey in Arts.
Grade 90 recorded for Ross in palaeontology.
Grade 75 recorded for Ross in History.
Student: Joey, Age: 23, ID: 01001
Grades for Joey:
 - Arts: 85
Average Grade: 85.00
Total Credit Hours: 4
Student: Ross, Age: 25, ID: 01002
Grades for Ross:
 - palaeontology: 90
 - History: 75
Average Grade: 82.50
Total Credit Hours: 12
